---
apiVersion: v1
kind: ConfigMap
metadata:
  name: spring-cloud-consumer-configmap
  namespace: spring-cloud-ns
data:
  application.properties: |
    spring.application.name=spring-cloud-cloud-native-consumer
    management.endpoint.health.enabled=true
    management.endpoint.info.enabled=true
    consumer.msg=xixi

---
apiVersion: apps/v1	#与k8s集群版本有关，使用 kubectl api-versions 即可查看当前集群支持的版本
kind: Deployment	#该配置的类型，我们使用的是 Deployment
metadata:	        #译名为元数据，即 Deployment 的一些基本属性和信息
  namespace: spring-cloud-ns
  name: spring-cloud-consumer-deployment	#Deployment 的名称
  labels:	    #标签，可以灵活定位一个或多个资源，其中key和value均可自定义，可以定义多组，目前不需要理解
    app: spring-cloud-consume	#为该Deployment设置key为app，value为nginx的标签
spec:	        #这是关于该Deployment的描述，可以理解为你期待该Deployment在k8s中如何使用
  replicas: 1	#使用该Deployment创建一个应用程序实例
  selector:	    #标签选择器，与上面的标签共同作用，目前不需要理解
    matchLabels:
      app: spring-cloud-consume
  template:	    #这是选择或创建的Pod的模板
    metadata:	#Pod的元数据
      labels:	#Pod的标签
        app: spring-cloud-consume
    spec:	    #期望Pod实现的功能（即在pod中部署）
      serviceAccount: config-reader
      containers:	#生成container，与docker中的container是同一种
        - name: consumer	#container的名称
          image: edisonyao/spring-cloud-cloud-native-consumer:latest	#镜像
          imagePullPolicy: Always
          volumeMounts:
            - name: spring-cloud-consumer-configmap
              mountPath: /application.properties
              subPath: application.properties
      volumes:
        - name: spring-cloud-consumer-configmap
          configMap:
            name: spring-cloud-consumer-configmap
            items:
              - key: application.properties
                path: application.properties

---
apiVersion: v1
kind: Service
metadata:
  name: spring-cloud-svc	#Service 的名称
  namespace: spring-cloud-ns
  labels:     	#Service 自己的标签
    app: spring-cloud-consume	#为该 Service 设置 key 为 app，value 为 nginx 的标签
spec:	    #这是关于该 Service 的定义，描述了 Service 如何选择 Pod，如何被访问
  selector:	    #标签选择器
    app: spring-cloud-consume	#选择包含标签 app:nginx 的 Pod
  ports:
    - name: consumer-port	#端口的名字
      protocol: TCP	    #协议类型 TCP/UDP
      port: 8080	        #集群内的其他容器组可通过 80 端口访问 Service
      nodePort: 32600   #通过任意节点的 32600 端口访问 Service
      targetPort: 8080	#将请求转发到匹配 Pod 的 80 端口
  type: NodePort	#Serive的类型，ClusterIP/NodePort/LoaderBalancer
